@tag "elm"
@description "Upgrade from Beginner Program to Program"
editor UpgradeToProgram

let module="Main"

UpgradeMainFunction
AddSubscriptionsFunction
UpgradeInit
UpgradeUpdate

editor UpgradeUpdate
  param module: .*

  Print message="upgrading update function"

  with elm.module when name = module
    # use alias f to avoid issues with JavaScript reserved word
    with function f when name = 'update'
      do changeType 'Msg -> Model -> ( Model, Cmd Msg )'

  with elm.module when name = 'Main'
    with function f when name = 'update'
      with case cc # when match = 'msg'
        begin
           do replaceBody { cc.body() + " ! []" }
        end

editor UpgradeInit
  param module: .*

  Print message="upgrading init function"

  with elm.module when name = module
    with function f when name = 'model'
    begin
      do changeType '( Model, Cmd Msg )'
      do rename 'init'
      do replaceBody { f.body() + " ! []" }
    end

editor AddSubscriptionsFunction
  param module: .*

  Print message="adding subscription function"

  with elm.module when name = module begin
    do addFunction { '\n\n-- SUBSCRIPTIONS\n\n\nsubscriptions model =\n    Sub.none\n\n' }
  end


editor UpgradeMainFunction
  param module: .*

  Print message="upgrading main function"

  with file f begin
    do eval { print("processing file " + f.path()) }
    with elm.module when name = module
      begin
        with function f when name = 'main'
          do replaceBody
           { return "Html.App.program\n        { init = init\n        , subscriptions = subscriptions\n        , update = update\n        , view = view\n        }\n" }
       end
   end

editor Print
  param message: .*
  with project p
    do eval { print(message) }
