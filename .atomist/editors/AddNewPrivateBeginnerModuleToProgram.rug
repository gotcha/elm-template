@tag "elm"
@description "add an empty beginner module to a (not-beginner) Program"
editor AddNewPrivateBeginnerModuleToProgram

@description "Name of the new module"
param new_module_name: .*

let new_file={ "src/" + new_module_name + ".elm" }
let lower_new_module={ new_module_name.charAt(0).toLowerCase() + new_module_name.slice(1) }


with project p
  do merge "AdditionalBeginnerModule.elm.vm" new_file

AddImport module="Main", lizard=new_module_name
AddToModel field_name=lower_new_module, field_type={ new_module_name + ".Model"}, initial_value={ new_module_name + ".model"}
AddMessage constructor={ new_module_name + "Msg " + new_module_name + ".Msg" },
           deconstructor={ new_module_name + "Msg msg"},
           update_model={ return(
           " let" + "\n" +
           "                _LOWER_Model =" + "\n" +
           "                    _UPPER_.update msg model._LOWER_" + "\n" +
           "            in" + "\n" +
           "                { model | _LOWER_ = _LOWER_Model } ! [] " + "\n").replace(
             /_LOWER_/g, lower_new_module).replace(
             /_UPPER_/g, new_module_name);
           }
AddFunction module="Main", code={ return(
  "_LOWER_View model ="+ "\n" +
  "    Html.App.map _UPPER_Msg (_UPPER_.view model._LOWER_)" + "\n").replace(
    /_LOWER_/g, lower_new_module).replace(
    /_UPPER_/g, new_module_name);
  }
