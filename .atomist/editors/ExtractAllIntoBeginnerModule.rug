@tag "elm"
@tag "advanced"
@description "Extract an entire Program from top-level to a module"
editor ExtractAllIntoBeginnerModule

@description "Name of the module to extract into"
param new_module_name: [A-Z][\w]*

let new_file_name={ new_module_name + ".elm" }

# copy the Main file and make into the new module
with project p
  do copyFile "Main.elm" new_file_name

with file when name = new_file_name
  with elm.module begin
    do rename new_module_name
    do replaceExposing "Model, model, Msg, update, view"
  end

AddImport module="Main", lizard=new_module_name
RemoveFunctioB module=new_module_name, function="main"
ReplaceIniBeginner
ReplaceModeBeginner
ReplaceMsBeginner
ReplaceUpdatBeginner

editor RemoveFunctioB
  param module: .*
  param function: .*

  with file
  with elm.module when name = module
    do removeFunction function

editor ReplaceUpdatBeginner
param new_module_name: .*

let lower_new_module={ new_module_name.charAt(0).toLowerCase() + new_module_name.slice(1) }
let new_body_update={
  return( "    case msg of" + "\n" +
          "        _UPPER_Msg _LOWER_Msg ->" + "\n" +
          "            let" + "\n" +
          "                _LOWER_Model =" + "\n" +
          "                    _UPPER_.update _LOWER_Msg model._LOWER_" + "\n" +
          "            in" + "\n" +
          "                { model | _LOWER_ = _LOWER_Model }" + "\n" +
          "" + "\n" +
          "        Noop ->" + "\n" +
          "            model ! []" + "\n").replace(
            /_LOWER_/g, lower_new_module).replace(
            /_UPPER_/g, new_module_name);
      }

  ReplaceFunctionBody function="update", new_body=new_body_update

editor ReplaceMsBeginner
  param new_module_name: .*

  let new_body_msg={
    return ("  Noop" + "\n" +
            "    | _UPPER_Msg _UPPER_.Msg" + "\n").replace(
              /_UPPER_/g, new_module_name);
    }

  with file
    with elm.module when name = "Main"
      with type when name = "Msg"
        do replaceBody new_body_msg

editor ReplaceModeBeginner
  param new_module_name: .*

  let lower_new_module={ new_module_name.charAt(0).toLowerCase() + new_module_name.slice(1) }
  let new_body_model={
  return ("       { _LOWER_ : _UPPER_.Model }" + "\n").replace(
            /_LOWER_/g, lower_new_module).replace(
            /_UPPER_/g, new_module_name);
  }

  with file
  with elm.module when name = "Main"
    with type.alias when name = "Model"
      do replaceBody new_body_model


editor ReplaceIniBeginner
  param new_module_name: .*

  let lower_new_module={ new_module_name.charAt(0).toLowerCase() + new_module_name.slice(1) }
  let new_init={
  return ("    { _LOWER_ =  _UPPER_.init }\n".replace(
            /_LOWER_/g, lower_new_module).replace(
            /_UPPER_/g, new_module_name);
  }

  ReplaceFunctionBody function="model", new_body=new_init
