@description "Add a new pattern to a case"
editor AddUpdateClause

	@description "Elm module to modify"
	@displayName "Module Name"
	@optional
	@default "Main"
	param module: [A-Z][\w]*

  @displayName "New Pattern"
  @description "new pattern the case can match"
  @validInput "A union type deconstructor"
  param new_pattern: .*

	@displayName "Body of case clause"
	@description "What to return when this case is met, or blank and I'll decide"
	@validInput "An Elm expression"
	param body: .*

with file
  with elm.module when name = module
    with function upd when name = "update" and { -1 == upd.body().indexOf(new_pattern + ' ->')} begin
		  do eval { print("type is " + upd.typeSpecification())}
      with case c when { (body === "" ) && upd.typeSpecification().endsWith("Model")}
        do addClause new_pattern "model"
			with case c when { (body === "") && upd.typeSpecification().endsWith(")")}
        do addClause new_pattern "model ! []"
			with case c when { body !== "" }
			  do addClause new_pattern body
		end
