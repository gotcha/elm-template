@tag "elm"
@description "Adds a text input to an Elm beginner program "
editor AddTextInput

@displayName "Name"
@description "Name of the text input (the field to store in the model)"
@validInput "An elm identifier"
param input_name: [a-z][\w]*

# capitalize
let type_name_foo={ input_name.charAt(0).toUpperCase() + input_name.slice(1) }
let function_body={ input_name + "Input model = \n" +
   "    Html.input [ Html.Events.onInput " + type_name_foo + " ] []\n" }

AddToModel initial_value='""', field_type="String", field_name=input_name

AddMessage constructor={ type_name_foo + " String" },
           update_model={ return "{ model | model." + input_name + " = string }" },
           deconstructor={ type_name_foo + " string" }

AddImport module="Main", fqn="Html.Events"

AddFunction module="Main", code=function_body

@description "add an import statement, if it does not exist yet"
editor AddImport
  param module: [A-Z][\w]*

  @description "The import to add, fully qualified"
  param fqn: .*

  with elm.module when name = module
    do addImportStatement {"import " + fqn}

@description "add a whole declaration"
editor AddFunction

@description "Where does this belong"
@displayName "Module Name"
param module: [A-Z][\w]*

@displayName "Code"
@description "All the code to add"
@validInput "An Elm declaration"
param code: .*

with file
  with elm.module when name = module
    do addFunction code

@tag "elm"
@description "Adds a field to the model of an Elm beginner program"
editor AddToModel

@displayName "Field Name"
@maxLength 21
@description "Name of the new model field"
param field_name: [a-z][\w]*


@displayName "Field Type"
@description "Type of the new field"
@validInput "An Elm type"
param field_type: .*

@description "Initial value of the field"
@displayName "Initial Value"
@validInput "If this is a string, please include quotes"
param initial_value: .*


AddToRecordTypeAlias type_name="Model", module="Main"
AddToModelInitialization function_name="model", module="Main", field_value=initial_value


@description "Add a field to a record type alias"
editor AddToRecordTypeAlias

  @description "Where is this type alias"
  @displayName "Module Name"
  param module: .*

  @description "Name of the type alias to change"
  @displayName "Type alias Name"
  param type_name: [a-z][\w]*

  @displayName "Field Name"
  @description "Name of the new model field"
  param field_name: [a-z][\w]*


  @displayName "Field Type"
  @description "Type of the new field"
  @validInput "An Elm type"
  param field_type: .*

with file
  with elm.module when name = module
    with type.alias when name = type_name
      with recordType
        do add field_name field_type


@description "Add a field to a record type alias"
editor AddToModelInitialization

  @description "Elm module to modify"
  @displayName "Module Name"
  param module: .*

  @description "Name of the function that has a record value in it"
  @displayName "Function name"
  param function_name: [a-z][\w]*

  @displayName "Field Name"
  @description "Name of the new model field"
  param field_name: [a-z][\w]*


  @displayName "Field Value"
  @description "Populate the new field"
  @validInput "An Elm expression"
  param field_value: .*

with file
  with elm.module when name = module
    with function when name = function_name
      with recordValue
        do add field_name field_value
