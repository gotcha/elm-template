@tag "elm"
@description "Adds a text input to an Elm beginner program "
editor AddTextInput

@displayName "Name"
@description "Name of the text input (the field to store in the model)"
@validInput "An elm identifier"
param input_name: [a-z][\w]*

# capitalize
let type_name_foo={ input_name.charAt(0).toUpperCase() + input_name.slice(1) }
let function_body={
  return (
   "_INPUT_NAME_Input : Model -> Html Msg\n" +
   "_INPUT_NAME_Input model =\n" +
   "    Html.input [ Html.Events.onInput _TYPE_NAME_ ] []\n").replace(
  /_INPUT_NAME_/g, input_name).replace(
  /_TYPE_NAME_/g, type_name_foo);
 }

AddToModel initial_value='""', field_type="String", field_name=input_name

AddMessage constructor={ type_name_foo + " String" },
           update_model={ return "{ model | " + input_name + " = string }" },
           deconstructor={ type_name_foo + " string" }

AddImport module="Main", fqn="Html.Events"

AddFunction module="Main", code=function_body

@description "add an import statement, if it does not exist yet"
editor AddImport
  param module: [A-Z][\w]*

  @description "The import to add, fully qualified"
  param fqn: .*

  with elm.module when name = module
    do addImportStatement {"import " + fqn}

@description "add a whole declaration"
editor AddFunction

  @description "Where does this belong"
  @displayName "Module Name"
  param module: [A-Z][\w]*

  @displayName "Code"
  @description "All the code to add"
  @validInput "An Elm declaration"
  param code: .*

  with file
    with elm.module when name = module
      do addFunction code
