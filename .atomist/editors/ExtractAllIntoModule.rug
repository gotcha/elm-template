@tag "elm"
@tag "advanced"
@description "Extract an entire Program from top-level to a module"
editor ExtractAllIntoModule

@description "Name of the module to extract into"
param new_module_name: [A-Z][\w]*

let new_file_name={ new_module_name + ".elm" }

# copy the Main file and make into the new module
with project p
  do copyFile "Main.elm" new_file_name

with file when name = new_file_name
  with elm.module begin
    do rename new_module_name
    do replaceExposing "Model, init, Msg, update, view, subscriptions"
  end

RemoveFunction module=new_module_name, function="main"
ReplaceInit
ReplaceModel
ReplaceSubscriptions
ReplaceMsg
ReplaceUpdate



editor RemoveFunction
  param module: .*
  param function: .*

  with elm.module when name = module
    do removeFunction function

editor ReplaceUpdate
param new_module_name: .*

let lower_new_module={ new_module_name.charAt(0).toLowerCase() + new_module_name.slice(1) }
let new_body_update={
  return( "    case msg of" + "\n" +
          "        RandomGifMsg randomGifMsg ->" + "\n" +
          "            let" + "\n" +
          "                ( randomGifModel, randomGifCommands ) =" + "\n" +
          "                    RandomGif.update randomGifMsg model.randomGif" + "\n" +
          "            in" + "\n" +
          "                ( { model | randomGif = randomGifModel }" + "\n" +
          "                , Cmd.map RandomGifMsg randomGifCommands" + "\n" +
          "                )" + "\n" +
          "" + "\n" +
          "        Noop ->" + "\n" +
          "            model ! []" + "\n").replace(
            /_LOWER_/g, lower_new_module).replace(
            /_UPPER_/g, new_module_name);
      }

  ReplaceFunctionBody function="update", new_body=new_body_update

editor ReplaceSubscriptions
  param new_module_name: .*

  let lower_new_module={ new_module_name.charAt(0).toLowerCase() + new_module_name.slice(1) }
  let new_body_subscriptions={
    return ("   Sub.batch [ _UPPER_.subscriptions model._LOWER_ ]" + "\n").replace(
            /_LOWER_/g, lower_new_module).replace(
            /_UPPER_/g, new_module_name);
    }

  with elm.module when name = "Main"
    with type.alias when name = "Model"
      do replaceBody new_body_subscriptions

editor ReplaceMsg
  param new_module_name: .*

  let new_body_msg={
    return ("  Noop" + "\n" +
            "    | _UPPER_Msg _UPPER_.Msg" + "\n").replace(
              /_UPPER_/g, new_module_name);
    }

    with elm.module when name = "Main"
      with type when name = "Msg"
        do replaceBody new_body_msg

editor ReplaceModel
  param new_module_name: .*

  let lower_new_module={ new_module_name.charAt(0).toLowerCase() + new_module_name.slice(1) }
  let new_body_model={
  return ("       { _LOWER_ : _UPPER_.Model }" + "\n").replace(
            /_LOWER_/g, lower_new_module).replace(
            /_UPPER_/g, new_module_name);
  }

  with elm.module when name = "Main"
    with type.alias when name = "Model"
      do replaceBody new_body_model


editor ReplaceInit
  param new_module_name: .*

  let lower_new_module={ new_module_name.charAt(0).toLowerCase() + new_module_name.slice(1) }
  let new_init={
  return ("    let\n" +
          "        ( _LOWER_Model, _LOWER_Commands ) =" + "\n" +
          "            _UPPER_.init" + "\n" +
          "    in" + "\n" +
          "        { arr = _LOWER_Model }" + "\n" +
          "            ! [ _LOWER_Commands ]" + "\n").replace(
            /_LOWER_/g, lower_new_module).replace(
            /_UPPER_/g, new_module_name);
  }

  ReplaceFunctionBody function="init", new_body=new_init

editor ReplaceFunctionBody

  param function: .*
  param new_body: .*
  # gut all the functions in Main and make them call the new module
    with elm.module when name = "Main"
      with function when name = function
        do replaceBody new_body
